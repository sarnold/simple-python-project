[tox]
envlist = py3{9,10,11,12,13}-{linux,macos,windows},coverage
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
    windows-latest: windows
    ubuntu-22.04: linux
    macos-13: macos
    windows-2019: windows

[base]
deps =
    pip>=23.1
    setuptools_scm[toml]

[build]
deps =
    pip>=23.1
    build
    twine

[reqs]
deps =
    doorstop

[testenv]
description =
    Default test environment for pytest and Python version/gh-action test matrix

passenv =
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PLATFORM
    PYTHON
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    pythonLocation

setenv =
    COVERAGE_FILE = .coverage.{envname}

allowlist_externals =
    bash

deps =
    {[base]deps}
    -e .[test,cov]

commands =
    python -m pytest -v tests/ --capture={posargs:"fd"} --cov=simple --cov-branch --cov-report term-missing

[testenv:coverage]
description =
    Follow-on multi-platform test coverage (depends on default env)

basepython =
    python3

skip_install =
    true

allowlist_externals =
    bash

deps =
    coverage

commands =
    bash -c 'coverage combine .coverage.py*'
    coverage xml

depends =
    py39
    py310
    py311
    py312
    py313

[coverage:run]
parallel=True

[testenv:{dev,node}]
# these tox env cmds share a virtual env using the following plugin
# https://github.com/masenf/tox-ignore-env-name-mismatch
envdir = {toxinidir}/.venv
runner = ignore_env_name_mismatch
skip_install = true

description =
    Dev environment with doorstop using pip editable (-e) install (shared with node)

setenv =
    PIP_PRE = {env:PIP_PRE:1}

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    SSH*

deps =
    node: nodeenv
    {[base]deps}
    {[reqs]deps}
    -e .

commands_pre =
    node: nodeenv --prebuilt -p
    node: npm install -g @mermaid-js/mermaid-cli

commands =
    dev: doorstop {posargs}
    node: mmdc {posargs:"-h"}

[testenv:lint]
description =
    Linting environment using Pylint with normal pip install

deps =
    {[base]deps}
    -r requirements.txt
    pylint

commands =
    pylint -d C0104 --fail-under=9 src/

[testenv:style]
description =
    Python coding style using flake8

passenv =
    CI
    PYTHONIOENCODING

deps =
    {[base]deps}
    flake8

commands =
    flake8 src/

[testenv:build]
skip_install = true

description =
    PEP517 package build and metadata check

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    SETUPTOOLS_SCM_PRETEND_VERSION

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
always_copy = False

description =
    Install check for built wheel package (clean venv with no extra deps)

passenv =
    CI
    GITHUB*
    PIP_DOWNLOAD_CACHE

deps =
    pip>=23.1

commands =
    python -m pip install simple --pre --force-reinstall --prefer-binary -f dist/
    python -m pip show -f simple

[testenv:{docs,ldocs,cdocs}]
# these tox env cmds share a virtual env using the following plugin
# https://github.com/masenf/tox-ignore-env-name-mismatch
envdir = {toxworkdir}/docs
runner = ignore_env_name_mismatch
skip_install = true

description =
    docs: (re)Build Sphinx documentation
    ldocs: Run linkcheck on Sphinx documentation
    cdocs: Clean Sphinx html build artifacts

allowlist_externals =
    make
    bash

deps =
    {[base]deps}
    {[reqs]deps}
    .[doc]

commands_pre =
    docs: doorstop publish REQ docs/source/ds/reqs_tree.md
    docs: doorstop publish TST docs/source/ds/unit_tests.md
    docs: doorstop publish SDD docs/source/ds/sw_design.md
    docs: bash docs/sphinx_prep.sh docs/source/ds/reqs_tree.md
    docs: bash docs/sphinx_prep.sh docs/source/ds/unit_tests.md
    docs: bash docs/sphinx_prep.sh docs/source/ds/sw_design.md

commands =
    docs: make -C docs html
    ldocs: make -C docs linkcheck
    cdocs: make -C docs clean

[testenv:mypy]
skip_install = true

description =
    Run mypy type checker (needs all deps)

deps =
    {[base]deps}
    mypy
    -r requirements.txt
    munch-stubs @ git+https://github.com/VCTLabs/munch-stubs.git@main

commands =
    python -m mypy --follow-imports=normal --install-types --check-untyped-defs --non-interactive src/

[testenv:reuse]
skip_install = true

description =
    Run reuse lint license checks, install sbom tool

passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    reuse
    sbom4python

commands =
    reuse {posargs:"lint"}

[testenv:sec]
skip_install = true

description =
    Run Bandit security checks

passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    bandit[toml]

commands =
    bandit -c pyproject.toml -r src

[testenv:md]
skip_install = true
passenv =
    DEBUG
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}

commands =
    python docs/process_md_urls.py {posargs}

[testenv:changes]
skip_install = true

description =
    Generate full or partial changelog; use git delta syntax for changes-since

passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

setenv =
    VERSION = {env:VERSION}

allowlist_externals = bash

deps =
    {[base]deps}
    gitchangelog @ https://github.com/sarnold/gitchangelog/releases/download/3.2.0/gitchangelog-3.2.0-py3-none-any.whl

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.rst'

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

description =
    Clean build artifacts and workflow cruft (does not clean Tox env dirs)

deps =
    pip>=21.1

commands =
    bash -c 'rm -rf src/*.egg_info dist/ build/ .coverage* coverage.xml'
    bash -c 'rm -rf .pytest_cache __pycache__ src/*/__pycache__ docs/source/api'
    bash -c 'rm -rf docs/source/ds/*.md docs/source/ds/*/*.svg'
